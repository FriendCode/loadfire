{"name":"Loadfire","tagline":"A scriptable Load Balancer & Reverse Proxy in NodeJS","body":"# LoadFire\r\n\r\nLoadFire is an easy to script load balancer and reverse proxy in NodeJS.\r\n\r\nIt allows you to write your own pieces of logic as \"Patterns\" and the core engine takes care of all the proxying logic so you don't have to worry about it.\r\n\r\n**The real power is that all it's behavior is entirely scriptable in JavaScript (NodeJS). :)**\r\n\r\n###This allows for many different use cases, such as:\r\n  - Dynamic realtime proxying rules (domain mappings stored in Redis for example). Such things are useful for PaaSs \r\n  - Add pieces of middleware to your reverse proxy\r\n  - Customizable load balancing patterns (Sticky, RoundRobin, ...)\r\n\r\n###It supports proxying:\r\n  - HTTP/HTTPS\r\n  - WebSockets\r\n\r\n## Examples:\r\n\r\n### Proxying HTTP traffic using RoundRobin pattern\r\n\r\n```js\r\nvar http = require('http');\r\nvar loadfire = require('loadfire');\r\n\r\n\r\nvar EDITOR_PORTS = [7001, 7002, 7003,7004];\r\n\r\nvar EDITOR_SERVERS = EDITOR_PORTS.map(function (x) {\r\n    return {\r\n        host: 'localhost',\r\n        port: x\r\n    };\r\n});\r\n\r\n// Start all our different http servers\r\nfunction startEditorServers(ports) {\r\n    ports.forEach(function (port) {\r\n        // Setup HTTP Server\r\n        var httpServer = http.createServer(function(req, res) {\r\n            // Output the port number the server is running on\r\n            res.writeHead(200, {'Content-Type': 'text/plain'});\r\n            res.end(port.toString());\r\n        });\r\n\r\n        // Listen on assigned port\r\n        httpServer.listen(port);\r\n    });\r\n}\r\n\r\n// Config for our loadfire server\r\nvar CONFIG = {\r\n    'resources': [\r\n        {\r\n            // resource is some value identify this resource\r\n            // by default it should be the hostname to match\r\n            resource: 'localhost:8000',\r\n\r\n            // List of backends to hit\r\n            backends: EDITOR_SERVERS,\r\n\r\n            // Load balancing pattern\r\n            // As of now a few are builtin\r\n            // random, roundrobin, sticky\r\n            pattern: 'roundrobin'\r\n        }\r\n    ],\r\n\r\n    // Server to start loadfire on\r\n    port: 8000\r\n};\r\n\r\nfunction main() {\r\n    // Start our http servers\r\n    startEditorServers(EDITOR_PORTS);\r\n\r\n    // Setup our load balancer with the above config\r\n    var loadServer = loadfire.createServer(CONFIG);\r\n\r\n    // Now start our load balancer\r\n    loadServer.run();\r\n\r\n    // Check out localhost:8000\r\n    // Refresh a few times and you'll see different port numbers appear\r\n    // depending on which http server the requests are proxied to\r\n    // since we are using the roundrobin pattern it will cycle through them\r\n}\r\n\r\n// Run main\r\nmain();\r\n```\r\n\r\n\r\nIt was initially built to satisfy our needs at FriendCode, and we've been using it in product for months without any issues, so it can be considered as stable.\r\n\r\nThe API however will be changed soon due to some design decisions aiming to simplify it's API. (Patterns are quite monolithic as of now, they will be split up into different parts: matcher, mapper, balancer, store).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}